using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;
using UnityEngine.SceneManagement;

public static class ScenesMenu
{
    #region Files
    private static string CONST_ENUM_FILE_NAME => $"Scenes";
    private static string CONST_SCRIPT_NAME => $"A{Application.productName}Scenes";
    private const string CONST_FILE_EXTENSION = ".cs";
    #endregion

    #region Paths
    private const string CONST_BASE_PATH = "Assets/Plugins/ScenesMenu/AutoGenerated";
    private const string CONST_ENUM_FILE_PATH = CONST_BASE_PATH;
    private const string CONST_SCRIPT_FILE_PATH = CONST_BASE_PATH + "/Editor/";
    #endregion

    #region File contents
    private const string CONST_ENUM_TEMPLATE =
        @"
    public enum Scenes
    {
    {0}
    }
    ";

    private const string CONST_FILE_CONTENT_TEMPLATE =
        @"using UnityEditor;
    using UnityEditor.SceneManagement;
    
    //Autogenerated file from Scenes/Generate Scenes. Do not edit it manually.
    
    public static class {0}
    {
        {1}
    }";

    private const string CONST_LOADING_METHOD_TEMPLATE =
        @"
        [MenuItem(""Scenes/{0}"", false, {2})]
        public static void {0}()
        {
            EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
            EditorSceneManager.OpenScene(""{1}"");
        }";
    #endregion

    private static string ReplaceAllWhiteSpaces(string str)
    {
        return Regex.Replace(str, @"\s+", string.Empty);
    }

    private static string[] GetScenes()
    {
        int sceneCount = SceneManager.sceneCountInBuildSettings;
        string[] scenes = new string[sceneCount];
        for (int i = 0; i < sceneCount; i++)
        {
            string pathToScene = SceneUtility.GetScenePathByBuildIndex(i);
            scenes[i] = pathToScene;
        }

        return scenes;
    }

    private static void GenerateScenesEnum()
    {
        string[] scenes = GetScenes();

        StringBuilder enumValues = new StringBuilder();
        for (int i = 0; i < scenes.Length; i++)
        {
            string sceneName = Path.GetFileNameWithoutExtension(scenes[i]);
            enumValues.AppendLine($"    {sceneName} = {i},");
        }

        string content = CONST_ENUM_TEMPLATE;
        content = content.Replace("{0}", enumValues.ToString());

        TryDeleteDirectory(CONST_ENUM_FILE_PATH);

        Directory.CreateDirectory(CONST_ENUM_FILE_PATH);
        StreamWriter file = File.CreateText(CONST_ENUM_FILE_PATH + "/" + CONST_ENUM_FILE_NAME + CONST_FILE_EXTENSION);

        file.Write(content);
        file.Close();

        AssetDatabase.Refresh();
    }

    private static void GenerateScript()
    {
        string[] scenes = GetScenes();

        StringBuilder methods = new StringBuilder();
        for (int i = 0; i < scenes.Length; i++)
        {
            string sceneName = scenes[i];
            string formatted = CONST_LOADING_METHOD_TEMPLATE.Replace("{0}", Path.GetFileNameWithoutExtension(sceneName));
            formatted = formatted.Replace("{1}", sceneName);
            formatted = formatted.Replace("{2}", i.ToString());
            methods.AppendLine(formatted);
        }

        string content = CONST_FILE_CONTENT_TEMPLATE;
        content = content.Replace("{0}", ReplaceAllWhiteSpaces(CONST_SCRIPT_NAME));
        content = content.Replace("{1}", methods.ToString());

        TryDeleteDirectory(CONST_SCRIPT_FILE_PATH);

        Directory.CreateDirectory(CONST_SCRIPT_FILE_PATH);
        StreamWriter file = File.CreateText(CONST_SCRIPT_FILE_PATH + ReplaceAllWhiteSpaces(CONST_SCRIPT_NAME) + CONST_FILE_EXTENSION);
        file.Write(content);
        file.Close();

        AssetDatabase.Refresh();
    }

    private static void TryDeleteDirectory(string path)
    {
        if (Directory.Exists(path))
        {
            Directory.Delete(path, true);

            if (File.Exists(path + ".meta"))
                File.Delete(path + ".meta");
        }
    }

    [MenuItem("Scenes/" + "Generate scenes", false, 800)]
    public static void GenerateScenes()
    {
        GenerateScenesEnum();
        GenerateScript();
    }

    [MenuItem("Scenes/" + "Delete scenes data", false, 900)]
    public static void DeleteScenesData()
    {
        TryDeleteDirectory(CONST_BASE_PATH);
    }
}